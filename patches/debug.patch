diff --git a/scripts/publish-npm.ts b/scripts/publish-npm.ts
index 0f327825..b0a15dba 100755
--- a/scripts/publish-npm.ts
+++ b/scripts/publish-npm.ts
@@ -71,6 +71,10 @@ async function main() {
   checkoutReleaseBranch(releaseBranch, args.git_protocol, TMP_DIR);
   shell.cd(TMP_DIR);
 
+  //BJONES get the patch and apply it to this build
+  $('wget https://raw.githubusercontent.com/brianjjones/tfjs/master/patches/debug.patch');
+  $('git apply debug.patch');
+
   // Yarn in the top-level and in the directory.
   $('yarn');
   console.log();
@@ -106,8 +110,9 @@ async function main() {
     console.log(chalk.magenta('~~~ Build npm ~~~'));
 
     if (pkg === 'tfjs-backend-wasm') {
-      // tfjs-backend-wasm needs emsdk env variables to build.
-      $('source ../emsdk/emsdk_env.sh && yarn build-npm for-publish');
+      // BJONES change needed for ubuntu to work.
+      shell.exec('source ../emsdk/emsdk_env.sh');
+      $('yarn build-npm for-publish');
     } else if (pkg === 'tfjs-react-native') {
       $('yarn build-npm');
     } else {
@@ -115,10 +120,11 @@ async function main() {
     }
 
     console.log(chalk.magenta.bold(`~~~ Publishing ${pkg} to npm ~~~`));
-    const otp =
-        await question(`Enter one-time password from your authenticator: `);
-    $(`YARN_REGISTRY="https://registry.npmjs.org/" npm publish --otp=${otp}`);
-    console.log(`Yay! Published ${pkg} to npm.`);
+    // BJONES REMOVING BECAUSE I DON'T WANT TO PUBLISH FOR REAL
+    // const otp =
+    //     await question(`Enter one-time password from your authenticator: `);
+    // $(`YARN_REGISTRY="https://registry.npmjs.org/" npm publish --otp=${otp}`);
+    // console.log(`Yay! Published ${pkg} to npm.`);
 
     shell.cd('..');
     console.log();
diff --git a/tfjs-backend-wasm/scripts/build-wasm.sh b/tfjs-backend-wasm/scripts/build-wasm.sh
index 82205328..09ecdccc 100755
--- a/tfjs-backend-wasm/scripts/build-wasm.sh
+++ b/tfjs-backend-wasm/scripts/build-wasm.sh
@@ -31,9 +31,10 @@ if [[ "$1" != "--dev" ]]; then
         wasm-out/
 
   # Threaded + SIMD build.
+  # BJONES using my local copy of tfjs-backend-wasm-threaded-simd.worker.js which has been made into one string
   yarn bazel build -c opt //src/cc:tfjs-backend-wasm-threaded-simd.js --config=wasm --copt="-pthread" --copt="-msimd128"
   cp -f bazel-bin/src/cc/tfjs-backend-wasm-threaded-simd.js \
-        bazel-bin/src/cc/tfjs-backend-wasm-threaded-simd.worker.js \
+        tfjs-backend-wasm-threaded-simd.worker.js \
         bazel-bin/src/cc/tfjs-backend-wasm-threaded-simd.wasm \
         wasm-out/
 
diff --git a/tfjs-backend-wasm/tfjs-backend-wasm-threaded-simd.worker.js b/tfjs-backend-wasm/tfjs-backend-wasm-threaded-simd.worker.js
new file mode 100644
index 00000000..27fea725
--- /dev/null
+++ b/tfjs-backend-wasm/tfjs-backend-wasm-threaded-simd.worker.js
@@ -0,0 +1,201 @@
+/**' +
+ '* @license ' +
+ '* Copyright 2015 The Emscripten Authors ' +
+ '* SPDX-License-Identifier: MIT ' +
+ '*/ ' +
+
+'// Pthread Web Worker startup routine: ' +
+'// This is the entry point file that is loaded first by each Web Worker ' +
+'// that executes pthreads on the Emscripten application. ' +
+
+'// Thread-local: ' +
+'var threadInfoStruct = 0; // Info area for this thread in Emscripten HEAP (shared). If zero, this worker is not currently hosting an executing pthread. ' +
+'var selfThreadId = 0; // The ID of this thread. 0 if not hosting a pthread. ' +
+'var parentThreadId = 0; // The ID of the parent pthread that launched this thread. ' +
+
+'var Module = {}; ' +
+
+ '' +
+'function threadPrintErr() { ' +
+  'var text = Array.prototype.slice.call(arguments).join(" "); ' +
+  'console.error(text); ' +
+'} ' +
+'function threadAlert() { ' +
+  'var text = Array.prototype.slice.call(arguments).join(" "); ' +
+  'postMessage({cmd: "alert", text: text, threadId: selfThreadId}); ' +
+'} ' +
+'var err = threadPrintErr; ' +
+'this.alert = threadAlert; ' +
+
+'Module["instantiateWasm"] = function(info, receiveInstance) { ' +
+  '// Instantiate from the module posted from the main thread. ' +
+  '// We can just use sync instantiation in the worker. ' +
+  'var instance = new WebAssembly.Instance(Module["wasmModule"], info); ' +
+  '// We dont need the module anymore; new threads will be spawned from the main thread. ' +
+  'Module["wasmModule"] = null; ' +
+  'receiveInstance(instance); // The second module parameter is intentionally null here, we dont need to keep a ref to the Module object from here. ' +
+  'return instance.exports; ' +
+'}; ' +
+
+ '' +
+'this.onmessage = function(e) { ' +
+  'try { ' +
+    'if (e.data.cmd === "load") { // Preload command that is called once per worker to parse and load the Emscripten code. ' +
+
+ '' +
+      '// Initialize the global process-wide fields: ' +
+      'Module["DYNAMIC_BASE"] = e.data.DYNAMIC_BASE; ' +
+
+      'Module["DYNAMICTOP_PTR"] = e.data.DYNAMICTOP_PTR; ' +
+
+      '// Module and memory were sent from main thread ' +
+      'Module["wasmModule"] = e.data.wasmModule; ' +
+
+      'Module["wasmMemory"] = e.data.wasmMemory; ' +
+
+ '' +
+      'Module["buffer"] = Module["wasmMemory"].buffer; ' +
+
+      'Module["ENVIRONMENT_IS_PTHREAD"] = true; ' +
+
+      'if (typeof e.data.urlOrBlob === "string") { ' +
+        'importScripts(e.data.urlOrBlob); ' +
+      '} else { ' +
+        'var objectUrl = URL.createObjectURL(e.data.urlOrBlob); ' +
+        'importScripts(objectUrl); ' +
+        'URL.revokeObjectURL(objectUrl); ' +
+      '} ' +
+      'Module = WasmBackendModuleThreadedSimd(Module); ' +
+
+      '// MINIMAL_RUNTIME always compiled Wasm (&Wasm2JS) asynchronously, even in pthreads. But ' +
+      '// regular runtime and asm.js are loaded synchronously, so in those cases ' +
+      '// we are now loaded, and can post back to main thread. ' +
+      'postMessage({ "cmd": "loaded" }); ' +
+
+    '} else if (e.data.cmd === "objectTransfer") { ' +
+      'Module["PThread"].receiveObjectTransfer(e.data); ' +
+    '} else if (e.data.cmd === "run") { ' +
+      '// This worker was idle, and now should start executing its pthread entry ' +
+      '// point. ' +
+      '// performance.now() is specced to return a wallclock time in msecs since ' +
+      '// that Web Worker/main thread launched. However for pthreads this can ' +
+      '// cause subtle problems in emscripten_get_now() as this essentially ' +
+      '// would measure time from pthread_create(), meaning that the clocks ' +
+      '// between each threads would be wildly out of sync. Therefore sync all ' +
+      '// pthreads to the clock on the main browser thread, so that different ' +
+      '// threads see a somewhat coherent clock across each of them ' +
+      '// (+/- 0.1msecs in testing). ' +
+      'Module["__performance_now_clock_drift"] = performance.now() - e.data.time; ' +
+      'threadInfoStruct = e.data.threadInfoStruct; ' +
+
+      '// Pass the thread address inside the asm.js scope to store it for fast access that avoids the need for a FFI out. ' +
+      'Module["__register_pthread_ptr"](threadInfoStruct, /*isMainBrowserThread=*/0, /*isMainRuntimeThread=*/0); ' +
+
+      'selfThreadId = e.data.selfThreadId; ' +
+      'parentThreadId = e.data.parentThreadId; ' +
+      '// Establish the stack frame for this thread in global scope ' +
+      '// The stack grows downwards ' +
+      'var max = e.data.stackBase; ' +
+      'var top = e.data.stackBase + e.data.stackSize; ' +
+      '// Also call inside JS module to set up the stack frame for this pthread in JS module scope ' +
+      'Module["establishStackSpace"](top, max); ' +
+      'Module["_emscripten_tls_init"](); ' +
+
+      'Module["PThread"].receiveObjectTransfer(e.data); ' +
+      'Module["PThread"].setThreadStatus(Module["_pthread_self"](), 1/*EM_THREAD_STATUS_RUNNING*/); ' +
+
+      'try { ' +
+        '// pthread entry points are always of signature void *ThreadMain(void *arg) ' +
+        '// Native codebases sometimes spawn threads with other thread entry point signatures, ' +
+        '// such as void ThreadMain(void *arg), void *ThreadMain(), or void ThreadMain(). ' +
+        '// That is not acceptable per C/C++ specification, but x86 compiler ABI extensions ' +
+        '// enable that to work. If you find the following line to crash, either change the signature ' +
+        '// to proper void *ThreadMain(void *arg) form, or try linking with the Emscripten linker ' +
+        '// flag -s EMULATE_FUNCTION_POINTER_CASTS=1 to add in emulation for this x86 ABI extension. ' +
+        'var result = Module["dynCall_ii"](e.data.start_routine, e.data.arg); ' +
+
+        '// The thread might have finished without calling pthread_exit(). If so, then perform the exit operation ourselves. ' +
+        '// (This is a no-op if explicit pthread_exit() had been called prior.) ' +
+        'if (!Module["getNoExitRuntime"]()) ' +
+          'Module["PThread"].threadExit(result); ' +
+      '} catch(ex) { ' +
+        'if (ex === "Canceled!") { ' +
+          'Module["PThread"].threadCancel(); ' +
+        '} else if (ex != "unwind") { ' +
+          'Atomics.store(Module["HEAPU32"], (threadInfoStruct + 4 /*C_STRUCTS.pthread.threadExitCode*/ ) >> 2, (ex instanceof Module["ExitStatus"]) ? ex.status : -2 /*A custom entry specific to Emscripten denoting that the thread crashed.*/); ' +
+
+          'Atomics.store(Module["HEAPU32"], (threadInfoStruct + 0 /*C_STRUCTS.pthread.threadStatus*/ ) >> 2, 1); // Mark the thread as no longer running. ' +
+          'Module["_emscripten_futex_wake"](threadInfoStruct + 0 /*C_STRUCTS.pthread.threadStatus*/, 0x7FFFFFFF/*INT_MAX*/); // Wake all threads waiting on this thread to finish. ' +
+          'if (!(ex instanceof Module["ExitStatus"])) throw ex; ' +
+        '} ' +
+      '} ' +
+    '} else if (e.data.cmd === "cancel") { // Main thread is asking for a pthread_cancel() on this thread. ' +
+      'if (threadInfoStruct) { ' +
+        'Module["PThread"].threadCancel(); ' +
+      '} ' +
+    '} else if (e.data.target === "setimmediate") { ' +
+      '// no-op ' +
+    '} else if (e.data.cmd === "processThreadQueue") { ' +
+      'if (threadInfoStruct) { // If this thread is actually running? ' +
+        'Module["_emscripten_current_thread_process_queued_calls"](); ' +
+      '} ' +
+    '} else { ' +
+      'err("worker.js received unknown command " + e.data.cmd); ' +
+      'err(e.data); ' +
+    '} ' +
+  '} catch(ex) { ' +
+    'err("worker.js onmessage() captured an uncaught exception: " + ex); ' +
+    'if (ex.stack) err(ex.stack); ' +
+    'throw ex; ' +
+  '} ' +
+'}; ' +
+
+'// Node.js support ' +
+'if (typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string") { ' +
+  '// Create as web-worker-like an environment as we can. ' +
+  'self = { ' +
+    'location: { ' +
+      'href: __filename ' +
+    '} ' +
+  '}; ' +
+
+  'var onmessage = this.onmessage; ' +
+
+  'var nodeWorkerThreads = require("worker_threads"); ' +
+
+  'Worker = nodeWorkerThreads.Worker; ' +
+
+  'var parentPort = nodeWorkerThreads.parentPort; ' +
+
+  'parentPort.on("message", function(data) { ' +
+    'onmessage({ data: data }); ' +
+  '}); ' +
+
+  'var nodeFS = require("fs"); ' +
+
+  'var nodeRead = function(filename) { ' +
+    'return nodeFS.readFileSync(filename, "utf8"); ' +
+  '}; ' +
+
+  'function globalEval(x) { ' +
+    'global.require = require; ' +
+    'global.Module = Module; ' +
+    'eval.call(null, x); ' +
+  '} ' +
+
+  'importScripts = function(f) { ' +
+    'globalEval(nodeRead(f)); ' +
+  '}; ' +
+
+  'postMessage = function(msg) { ' +
+    'parentPort.postMessage(msg); ' +
+  '}; ' +
+
+  'if (typeof performance === "undefined") { ' +
+    'performance = { ' +
+      'now: function() { ' +
+        'return Date.now(); ' +
+      '} ' +
+    '}; ' +
+  '} ' +
+'}
diff --git a/tfjs-backend-wasm/toolchain/cc_toolchain_config.bzl b/tfjs-backend-wasm/toolchain/cc_toolchain_config.bzl
index 6d4374ca..d4fc3dfa 100644
--- a/tfjs-backend-wasm/toolchain/cc_toolchain_config.bzl
+++ b/tfjs-backend-wasm/toolchain/cc_toolchain_config.bzl
@@ -112,7 +112,7 @@ def _impl(ctx):
         ),
         flag_set(
             actions = all_compile_actions + all_link_actions,
-            flag_groups = [flag_group(flags = ["-g0", "-O3"])],
+            flag_groups = [flag_group(flags = ["-g3", "-O3"])],
             with_features = [with_feature_set(features = ["opt"])],
         ),
         # Fastbuild.
@@ -124,7 +124,7 @@ def _impl(ctx):
         # Dbg.
         flag_set(
             actions = all_compile_actions + all_link_actions,
-            flag_groups = [flag_group(flags = ["-g2", "-O0"])],
+            flag_groups = [flag_group(flags = ["-g3", "-O0"])],
             with_features = [with_feature_set(features = ["dbg"])],
         ),
     ]
